{"version":3,"sources":["chart.js","App.js","reportWebVitals.js","index.js"],"names":["ApexChart","props","state","series","options","chart","type","stacked","stackType","plotOptions","bar","horizontal","stroke","width","colors","title","text","xaxis","categories","tooltip","y","formatter","val","fill","opacity","legend","position","horizontalAlign","offsetX","className","this","height","React","Component","App","baseProduct","videoProduct","cdvProduct","speedtierProduct","xhProduct","competitorProduct","divisionProduct","promotierProduct","data","require","loaded","chartData","total","setProduct","bind","findTotal","createChartData","findProductValue","setState","e","target","parentNode","id","innerHTML","str","capitalizeWord","charAt","toUpperCase","slice","Object","keys","map","output","push","name","toFixed","Dropdown","Toggle","variant","style","backgroundColor","color","borderColor","mapTypeName","Menu","product","Item","onClick","margin","marginTop","borderTop","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fe532f54.chunk.js","sourcesContent":["import React from 'react'\r\nimport Chart from 'react-apexcharts'\r\n\r\nexport default class ApexChart extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      series: this.props.series,\r\n      options: {\r\n        chart: {\r\n          type: 'bar',\r\n          stacked: true,\r\n          stackType: '100%'\r\n        },\r\n        plotOptions: {\r\n          bar: {\r\n            horizontal: true,\r\n          },\r\n        },\r\n        stroke: {\r\n          width: 1,\r\n          colors: ['#fff']\r\n        },\r\n        title: {\r\n          text: 'Dollar Value by Product'\r\n        },\r\n        xaxis: {\r\n          categories: ['MRC'],\r\n        },\r\n        tooltip: {\r\n          y: {\r\n            formatter: function (val) {\r\n              return '$' + val\r\n            }\r\n          }\r\n        },\r\n        fill: {\r\n          opacity: 1\r\n        },\r\n        legend: {\r\n          position: 'bottom',\r\n          horizontalAlign: 'center',\r\n          offsetX: 0,\r\n        }\r\n      },\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"app\">\r\n        <div className=\"row\">\r\n          <div className=\"mixed-chart\">\r\n            <Chart\r\n              options={this.state.options}\r\n              series={this.state.series}\r\n              type=\"bar\"\r\n              width=\"800\"\r\n              height=\"200\"\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}","import React from 'react' \nimport './App.css'\nimport Dropdown from 'react-bootstrap/Dropdown'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport ApexChart from './chart.js'\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      baseProduct: \"Base\",\n      videoProduct: \"Basic\",\n      cdvProduct: \"Unlimited\",\n      speedtierProduct: \"Tier 4\",\n      xhProduct: \"None\",\n      competitorProduct: \"Verizon\",\n      divisionProduct: \"Northeast\",\n      promotierProduct: \"None\",\n      data: require('./data.json'),\n      loaded: false,\n      chartData: [],\n      total: 0\n    }\n\n    this.setProduct = this.setProduct.bind(this);\n    this.findTotal = this.findTotal.bind(this);\n    this.createChartData = this.createChartData.bind(this);\n    this.findProductValue = this.findProductValue.bind(this);\n  }\n\n  componentDidMount() {\n    this.setState({\n      loaded: true\n    })\n  }\n\n  componentDidUpdate() {\n    if(!this.state.loaded) {\n      this.setState({\n        loaded: true\n      })\n    }\n  }\n\n  setProduct(e) { \n    this.setState({\n      [e.target.parentNode.parentNode.id+\"Product\"]: e.target.innerHTML,\n      loaded: false\n    })\n  }\n\n  mapTypeName(str) {\n    switch(str) {\n      case \"speedtier\":\n        return \"Speed Tier\"\n\n      case \"cdv\":\n        return \"CDV\"\n\n      case \"xh\":\n        return \"XH\"\n\n      case \"promotier\":\n        return \"Promo Tier\"\n\n      default:\n        return(this.capitalizeWord(str))\n    }\n  }\n\n  capitalizeWord(str) {\n    return(str.charAt(0).toUpperCase() + str.slice(1))\n  }\n\n  findProductValue(type) {\n    let { data } = this.state\n    return(data[type][this.state[type+\"Product\"]])\n  }\n\n  findTotal() {\n    let { data } = this.state\n    let total = 0\n    Object.keys(data).map((type) => \n      total += this.findProductValue(type)\n    )\n    return total\n  }\n\n  createChartData() {\n    let { data } = this.state;\n    let output = []\n    Object.keys(data).map((type) =>\n      output.push({\n        name: type,\n        data: [this.findProductValue(type).toFixed(2)]\n      })\n    )\n    return output      \n  }\n\n  render() {\n    let { data, loaded } = this.state\n\n    if(!loaded) {\n      return(\n        <div></div>\n      )\n    }\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">   \n            <p>Comcast Product Value Breakdown</p>\n            <div className=\"dropdown-container\">\n              {Object.keys(data).map((type) => \n                <div key={type}>\n                  <Dropdown className=\"dropdown\" id={type}>\n                    <Dropdown.Toggle \n                      variant=\"success\" \n                      id=\"dropdown-basic\" \n                      style={{backgroundColor: 'gainsboro', color: 'black', borderColor: 'white'}}>\n                        {this.mapTypeName(type)}\n                    </Dropdown.Toggle>\n            \n                    <Dropdown.Menu>\n                      {Object.keys(data[type]).map((product) => \n                        <Dropdown.Item key={product} onClick={this.setProduct}>{product}</Dropdown.Item>  \n                      )}\n                    </Dropdown.Menu>\n                  </Dropdown>\n                  <div className=\"dropdown-labels\">\n                    <p style={{margin: 0}}> { this.state[type + \"Product\"] } </p>\n                    <p style={{margin: 0}}> ${ this.findProductValue(type).toFixed(2) }</p>\n                    <p style={{marginTop: 0}}> { (this.findProductValue(type) / this.findTotal() * 100).toFixed(0) }% </p>\n                  </div>\n                </div>\n              )}\n            </div>\n\n\n          <div style={{borderTop: \"solid\"}}>\n            <p>Expected Price: ${this.findTotal().toFixed(2)}</p>\n          </div>\n\n          <div className='chart'>\n            <ApexChart series={this.createChartData()} total={this.findTotal()}/>\n          </div>\n          \n        </header>\n      </div>\n    );\n  }\n  \n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}